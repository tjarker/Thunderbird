;buildInfoPackage: chisel3, version: 3.2.2, scalaVersion: 2.11.12, sbtVersion: 1.3.2
circuit Thunderbird : 
  module Thunderbird : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip L : UInt<1>, flip R : UInt<1>, flip H : UInt<1>, flip B : UInt<1>, Lo : UInt<3>, Ro : UInt<3>}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Thunderbird.scala 16:25]
    reg turnReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Thunderbird.scala 18:24]
    io.Lo <= UInt<1>("h00") @[Thunderbird.scala 20:9]
    io.Ro <= UInt<1>("h00") @[Thunderbird.scala 21:9]
    node _T = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      when io.H : @[Thunderbird.scala 25:18]
        stateReg <= UInt<2>("h03") @[Thunderbird.scala 26:18]
        skip @[Thunderbird.scala 25:18]
      else : @[Thunderbird.scala 27:24]
        when io.R : @[Thunderbird.scala 27:24]
          stateReg <= UInt<2>("h02") @[Thunderbird.scala 28:18]
          skip @[Thunderbird.scala 27:24]
        else : @[Thunderbird.scala 29:24]
          when io.L : @[Thunderbird.scala 29:24]
            stateReg <= UInt<2>("h01") @[Thunderbird.scala 30:18]
            skip @[Thunderbird.scala 29:24]
          else : @[Thunderbird.scala 31:19]
            stateReg <= UInt<2>("h00") @[Thunderbird.scala 32:18]
            skip @[Thunderbird.scala 31:19]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        when io.H : @[Thunderbird.scala 36:18]
          stateReg <= UInt<2>("h03") @[Thunderbird.scala 37:18]
          skip @[Thunderbird.scala 36:18]
        else : @[Thunderbird.scala 38:25]
          node _T_2 = eq(io.L, UInt<1>("h00")) @[Thunderbird.scala 38:18]
          when _T_2 : @[Thunderbird.scala 38:25]
            stateReg <= UInt<2>("h00") @[Thunderbird.scala 39:18]
            skip @[Thunderbird.scala 38:25]
          else : @[Thunderbird.scala 40:19]
            stateReg <= UInt<2>("h01") @[Thunderbird.scala 41:18]
            skip @[Thunderbird.scala 40:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_3 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_3 : @[Conditional.scala 39:67]
          when io.H : @[Thunderbird.scala 45:18]
            stateReg <= UInt<2>("h03") @[Thunderbird.scala 46:18]
            skip @[Thunderbird.scala 45:18]
          else : @[Thunderbird.scala 47:25]
            node _T_4 = eq(io.R, UInt<1>("h00")) @[Thunderbird.scala 47:18]
            when _T_4 : @[Thunderbird.scala 47:25]
              stateReg <= UInt<2>("h00") @[Thunderbird.scala 48:18]
              skip @[Thunderbird.scala 47:25]
            else : @[Thunderbird.scala 49:19]
              stateReg <= UInt<2>("h02") @[Thunderbird.scala 50:18]
              skip @[Thunderbird.scala 49:19]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_5 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_5 : @[Conditional.scala 39:67]
            stateReg <= UInt<2>("h00") @[Thunderbird.scala 54:16]
            skip @[Conditional.scala 39:67]
    node _T_6 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_6 : @[Conditional.scala 40:58]
      turnReg <= UInt<1>("h00") @[Thunderbird.scala 60:15]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_7 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 39:67]
        io.Lo <= turnReg @[Thunderbird.scala 63:13]
        node _T_8 = bits(turnReg, 1, 0) @[Thunderbird.scala 64:25]
        node _T_9 = cat(_T_8, UInt<1>("h01")) @[Thunderbird.scala 64:32]
        turnReg <= _T_9 @[Thunderbird.scala 64:15]
        node _T_10 = eq(turnReg, UInt<3>("h07")) @[Thunderbird.scala 65:20]
        when _T_10 : @[Thunderbird.scala 65:29]
          turnReg <= UInt<1>("h00") @[Thunderbird.scala 66:17]
          skip @[Thunderbird.scala 65:29]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_11 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_11 : @[Conditional.scala 39:67]
          io.Ro <= turnReg @[Thunderbird.scala 70:13]
          node _T_12 = bits(turnReg, 2, 1) @[Thunderbird.scala 71:37]
          node _T_13 = cat(UInt<1>("h01"), _T_12) @[Thunderbird.scala 71:27]
          turnReg <= _T_13 @[Thunderbird.scala 71:15]
          node _T_14 = eq(turnReg, UInt<3>("h07")) @[Thunderbird.scala 72:20]
          when _T_14 : @[Thunderbird.scala 72:29]
            turnReg <= UInt<1>("h00") @[Thunderbird.scala 73:17]
            skip @[Thunderbird.scala 72:29]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_15 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_15 : @[Conditional.scala 39:67]
            io.Lo <= UInt<3>("h07") @[Thunderbird.scala 77:13]
            io.Ro <= UInt<3>("h07") @[Thunderbird.scala 78:13]
            skip @[Conditional.scala 39:67]
    
